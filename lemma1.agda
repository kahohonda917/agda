module lemma1 where

open import DSt
open import CPSt

open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.Empty
open import Data.Product
open import Function
open import Relation.Nullary
open import Data.Unit using (‚ä§; tt)
open import Relation.Binary.PropositionalEquality

subst-cont  : {var : cpstyp ‚Üí Set}{œÑ‚ÇÅ œÑ‚ÇÇ : typ}{ŒºŒ± : trail}{œÑ‚ÇÉ : cpstyp} ‚Üí
              (k‚ÇÅ : var œÑ‚ÇÉ ‚Üí cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí
              cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí cpsterm[ var ] (cpsT œÑ‚ÇÇ)) ‚Üí
              (v : cpsvalue[ var ] œÑ‚ÇÉ) ‚Üí
              (k‚ÇÇ : cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí
              cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí cpsterm[ var ] (cpsT œÑ‚ÇÇ)) ‚Üí Set

subst-cont {var} {œÑ‚ÇÅ} {œÑ‚ÇÇ} {ŒºŒ±} {œÑ‚ÇÉ} k‚ÇÅ v k‚ÇÇ =
  {v‚ÇÅ : var œÑ‚ÇÉ ‚Üí cpsvalue[ var ] (cpsT œÑ‚ÇÅ)} ‚Üí
  {v‚ÇÇ : var œÑ‚ÇÉ ‚Üí cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí cpsterm[ var ] cpsM ŒºŒ±} ‚Üí
  -- {v‚ÇÉ : cpsvalue[ var ] œÑ‚ÇÉ} ‚Üí
  {v‚ÇÅ‚Ä≤ : cpsvalue[ var ] (cpsT œÑ‚ÇÅ)} ‚Üí
  {v‚ÇÇ‚Ä≤ : cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí cpsterm[ var ] cpsM ŒºŒ±} ‚Üí
  cpsSubstVal (Œª x ‚Üí v‚ÇÅ x) v v‚ÇÅ‚Ä≤ ‚Üí
  cpsSubst (Œª x ‚Üí v‚ÇÇ x (v‚ÇÅ x)) v (v‚ÇÇ‚Ä≤ v‚ÇÅ‚Ä≤) ‚Üí
  cpsSubst (Œª x ‚Üí k‚ÇÅ x (v‚ÇÅ x) (v‚ÇÇ x (v‚ÇÅ x))) v (k‚ÇÇ v‚ÇÅ‚Ä≤ (v‚ÇÇ‚Ä≤ v‚ÇÅ‚Ä≤) )
  -- cpsSubst v‚ÇÅ v v‚ÇÅ‚Ä≤ ‚Üí
  -- cpsSubst (Œª y ‚Üí {!v‚ÇÇ y!}) v {!!} ‚Üí
  -- cpsSubst (Œª y ‚Üí {!k‚ÇÅ y (v‚ÇÅ y)!}) v {!!}

mutual
  SubstV‚â† : {var : cpstyp ‚Üí Set}{œÑ‚ÇÅ œÑ‚ÇÇ : cpstyp} ‚Üí
            {t : cpsvalue[ var ] œÑ‚ÇÅ} ‚Üí
            {v : cpsvalue[ var ] œÑ‚ÇÇ} ‚Üí
            cpsSubstVal (Œª y ‚Üí t) v t

  SubstV‚â† {var} {t = CPSVar x} = sVar‚â†
  SubstV‚â† {var} {t = CPSNum n} = sNum
  SubstV‚â† {var} {t = CPSFun e} = sFun Œª x ‚Üí Subst‚â†
  SubstV‚â† {var} {t = CPSId} = sId
  SubstV‚â† {var} {t = CPSTrail t} = sTra SubstV‚â†

  Subst‚â†  : {var : cpstyp ‚Üí Set}{œÑ‚ÇÅ œÑ‚ÇÇ : cpstyp} ‚Üí
            {t : cpsterm[ var ] œÑ‚ÇÅ} ‚Üí
            {v : cpsvalue[ var ] œÑ‚ÇÇ} ‚Üí
            cpsSubst (Œª y ‚Üí t) v t

  Subst‚â† {t = CPSVal x} = sVal SubstV‚â†
  Subst‚â† {t = CPSApp t t‚ÇÅ} = sApp Subst‚â† Subst‚â†
  Subst‚â† {t = CPSLet t x} = sLet (Œª y ‚Üí Subst‚â†) (Œª y‚ÇÇ ‚Üí Subst‚â†)
  Subst‚â† {t = CPSPlus t t‚ÇÅ} = sPlu Subst‚â† Subst‚â†
  Subst‚â† {t = CPSIdk x x‚ÇÅ t} = sIdk SubstV‚â† Subst‚â†
  Subst‚â† {t = CPSAppend x t t‚ÇÅ} = sApd Subst‚â† Subst‚â†
  Subst‚â† {t = CPSCons x t t‚ÇÅ} = sCon Subst‚â† Subst‚â†


mutual
  eSubstV  : {var : cpstyp ‚Üí Set} {œÑ‚ÇÅ œÑ : typ} ‚Üí
             {v‚ÇÅ : var (cpsT œÑ) ‚Üí value[ var ‚àò cpsT ] œÑ‚ÇÅ} ‚Üí
             {v‚ÇÅ‚Ä≤ : value[ var ‚àò cpsT ] œÑ‚ÇÅ} ‚Üí
             {v : value[ var ‚àò cpsT ] œÑ} ‚Üí
             SubstVal v‚ÇÅ v v‚ÇÅ‚Ä≤ ‚Üí
             cpsSubstVal (Œª y ‚Üí cpsV {var = var} (v‚ÇÅ y)) (cpsV v) (cpsV v‚ÇÅ‚Ä≤)
             
  eSubstV SubstVal.sVar= = cpsSubstVal.sVar=
  eSubstV SubstVal.sVar‚â† = cpsSubstVal.sVar‚â†
  eSubstV SubstVal.sNum = cpsSubstVal.sNum
  eSubstV (sFun sub) = sFun (Œª x ‚Üí sVal (sFun (Œª k ‚Üí sVal (sFun (Œª x‚ÇÅ ‚Üí
                       ekSubst' (Œª x‚ÇÇ x‚ÇÉ ‚Üí _) (CPSVal (CPSVar x‚ÇÅ)) (sub x))))))

  eSubst   : {var : cpstyp ‚Üí Set} {œÑ‚ÇÅ Œ± Œ≤ œÑ : typ} {ŒºŒ± ŒºŒ≤ : trail} ‚Üí
             {e‚ÇÅ : var (cpsT œÑ) ‚Üí
               term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
             {e‚ÇÇ : term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
             {v : value[ var ‚àò cpsT ] œÑ} ‚Üí
             {k : cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí cpsterm[ var ] (cpsT Œ±)} ‚Üí
             {t :  cpsterm[ var ] cpsM ŒºŒ≤} ‚Üí
             Subst e‚ÇÅ v e‚ÇÇ ‚Üí
             subst-cont (Œª x ‚Üí k) (cpsV v) k ‚Üí
             cpsSubst (Œª x ‚Üí cpsTerm (e‚ÇÅ x) k t) (cpsV v)
             (cpsTerm e‚ÇÇ k t)

  eSubst (sVal x) eq = eq (eSubstV x) Subst‚â†
  eSubst (sApp x x‚ÇÇ) eq = ekSubst x (Œª x‚ÇÅ x‚ÇÉ ‚Üí ekSubst {!x‚ÇÇ!}
                          (Œª x‚ÇÑ x‚ÇÖ ‚Üí sApp (sApp (sVal {!x‚ÇÑ!}) (sVal x‚ÇÑ))
                          (sVal (sFun Œª a ‚Üí eq sVar‚â† (sVal {!!})))))
  eSubst (sPlu x x‚ÇÇ) x‚ÇÅ = ekSubst x (Œª x‚ÇÉ x‚ÇÑ ‚Üí ekSubst {!x‚ÇÇ!}
                          (Œª x‚ÇÖ x‚ÇÜ ‚Üí sApp (sVal {!x‚ÇÖ!}) {!!}))
  eSubst (sCon x) x‚ÇÅ = {!!}
  eSubst (sPro x) x‚ÇÅ = {!!}
  


  ekSubst  : {var : cpstyp ‚Üí Set} {œÑ œÑ‚ÇÅ Œ± Œ≤ : typ} {ŒºŒ± ŒºŒ≤ : trail} ‚Üí
             {e‚ÇÅ : (var ‚àò cpsT) œÑ ‚Üí term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
             {e‚ÇÇ : term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
             {v : value[ var ‚àò cpsT ] œÑ} ‚Üí
             {k‚ÇÅ : var (cpsT œÑ) ‚Üí cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí
             cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí cpsterm[ var ] (cpsT Œ±)} ‚Üí
             {k‚ÇÇ : cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí
             cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí cpsterm[ var ] (cpsT Œ±)} ‚Üí
             {t‚ÇÅ : cpsterm[ var ] (cpsM ŒºŒ≤)} ‚Üí
             Subst e‚ÇÅ v e‚ÇÇ ‚Üí
             subst-cont k‚ÇÅ (cpsV v) k‚ÇÇ ‚Üí
             cpsSubst (Œª y ‚Üí cpsTerm (e‚ÇÅ y) (k‚ÇÅ y) t‚ÇÅ) (cpsV v)
                     (cpsTerm e‚ÇÇ k‚ÇÇ t‚ÇÅ)

  ekSubst (sVal x) eq = eq (eSubstV x) Subst‚â†
  -- eq Subst‚â† (eSubstV x)
  ekSubst (sApp sub‚ÇÅ sub‚ÇÇ) eq = {!!}
  -- ekSubst sub‚ÇÅ
                                --   Œª m n ‚Üí ekSubst {!sub‚ÇÇ!}
                                --   Œª m‚ÇÇ n‚ÇÇ ‚Üí sApp (sApp (sVal {!n!}) (sVal n‚ÇÇ))
                                --   (sVal (sFun (Œª x ‚Üí eq (sVal {!n‚ÇÇ!}) sVar‚â†)))
  ekSubst (sPlu x x‚ÇÇ) eq = ekSubst x {!eq!}
  ekSubst (sCon x) x‚ÇÅ = {!!}
  ekSubst (sPro x) x‚ÇÅ = {!!}


-- ([e‚ÇÅ]‚Ä≤ @ k)[v/y] = [e‚ÇÇ]‚Ä≤ @ k
  ekSubst'  : {var : cpstyp ‚Üí Set} {œÑ‚ÇÅ œÑ Œ± Œ≤ : typ} {ŒºŒ± ŒºŒ≤ : trail} ‚Üí
              {e‚ÇÅ : var (cpsT œÑ) ‚Üí
                    term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
              {e‚ÇÇ : term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
              {v : value[ var ‚àò cpsT ] œÑ} ‚Üí
              (k : cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí
              cpsterm[ var ] (cpsT Œ±)) ‚Üí
              (t : cpsterm[ var ] (cpsM ŒºŒ≤)) ‚Üí
              Subst e‚ÇÅ v e‚ÇÇ ‚Üí
              cpsSubst (Œª x ‚Üí cpsTerm (e‚ÇÅ x) k t)
                      (cpsV v)
                      (cpsTerm e‚ÇÇ k t)

  ekSubst' k t (sVal sub) = {!!}
  ekSubst' k t (sApp sub‚ÇÅ sub‚ÇÇ) = {!!}
  ekSubst' k t (sPlu x x‚ÇÅ) = {!!}
  ekSubst' k t (sCon x) = {!!}
  ekSubst' k t (sPro x) = {!!}


correctEta : {var : cpstyp ‚Üí Set} {œÑ‚ÇÅ Œ± Œ≤ : typ} {ŒºŒ± ŒºŒ≤ : trail} ‚Üí
             {e e‚Ä≤ : term[ var ‚àò cpsT ] œÑ‚ÇÅ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤} ‚Üí
             (k : cpsvalue[ var ] (cpsT œÑ‚ÇÅ) ‚Üí cpsterm[ var ] (cpsM ŒºŒ±) ‚Üí cpsterm[ var ] (cpsT Œ±)) ‚Üí
             (t : cpsterm[ var ] (cpsM ŒºŒ≤)) ‚Üí
             Reduce e e‚Ä≤ ‚Üí
             cpsreduce (cpsTerm e k t) (cpsTerm e‚Ä≤ k t)   --‚ü¶ e ‚üßk = ‚ü¶ e‚Ä≤ ‚üßk

correctEta {e‚Ä≤ = e‚Ä≤} k t (RBeta {e‚ÇÅ = e‚ÇÅ} {v‚ÇÇ = v‚ÇÇ} x) = begin
  (cpsTerm (App (Val (Fun e‚ÇÅ)) (Val v‚ÇÇ)) k t)
  ‚ü∂‚ü® rApp‚ÇÅ (rApp‚ÇÅ (rBeta (sVal (sFun (Œª x‚ÇÅ ‚Üí sVal (sFun (Œª x‚ÇÇ ‚Üí eSubst x Œª x‚ÇÉ x‚ÇÑ ‚Üí sApp (sApp Subst‚â† {!!}) x‚ÇÑ))))))) ‚ü©
  CPSApp
    (CPSApp
     (CPSVal
      (CPSFun
       (Œª z ‚Üí
          CPSVal
          (CPSFun
           (Œª z‚ÇÅ ‚Üí
              cpsTerm e‚Ä≤ (Œª v ‚Üí CPSApp (CPSApp (CPSVal (CPSVar z)) (CPSVal v)))
              (CPSVal (CPSVar z‚ÇÅ)))))))
     (CPSVal
      (CPSFun
       (Œª v ‚Üí
          CPSVal (CPSFun (Œª t'' ‚Üí k (CPSVar v) (CPSVal (CPSVar t''))))))))
    t
  ‚ü∂‚ü® rApp‚ÇÅ (rBeta (sVal (sFun (Œª x‚ÇÅ ‚Üí {!!})))) ‚ü©
  CPSApp (CPSVal (CPSFun {!!})) t
  ‚ü∂‚ü® {!!} ‚ü©
  (cpsTerm e‚Ä≤ k t)
  ‚àé
correctEta k t (RPlus {œÑ‚ÇÇ} {ŒºŒ±} {n‚ÇÅ} {n‚ÇÇ}) = begin
  (CPSLet (CPSPlus (CPSVal (CPSNum n‚ÇÅ)) (CPSVal (CPSNum n‚ÇÇ))) (Œª v ‚Üí k (CPSVar v) t))
  ‚ü∂‚ü® rLet‚ÇÅ rPlus ‚ü©
  CPSLet (CPSVal (CPSNum (n‚ÇÅ + n‚ÇÇ))) (Œª v ‚Üí k (CPSVar v) t)
  ‚ü∂‚ü® rLet {!!} ‚ü©
  k (CPSNum (n‚ÇÅ + n‚ÇÇ)) t
  ‚àé
  -- (k (CPSNum (n‚ÇÅ + n‚ÇÇ)) t)

  -- cpsreduce* (cpsTerm (frame-plug f e‚ÇÅ) k t)
  --     (cpsTerm (frame-plug f e‚ÇÇ) k t)

correctEta k t (RFrame  (App‚ÇÅ e‚ÇÉ) x) = correctEta (Œª v‚ÇÅ ‚Üí
                                                                         cpsTerm e‚ÇÉ
                                                                         (Œª v‚ÇÇ ‚Üí
                                                                            CPSApp
                                                                            (CPSApp (CPSApp (CPSVal v‚ÇÅ) (CPSVal v‚ÇÇ))
                                                                             (CPSVal
                                                                              (CPSFun
                                                                               (Œª v ‚Üí
                                                                                  CPSVal (CPSFun (Œª t'' ‚Üí k (CPSVar v) (CPSVal (CPSVar t''))))))))))
                                                                                  t x
correctEta k t (RFrame (App‚ÇÇ v‚ÇÅ) x) = correctEta (Œª v‚ÇÇ ‚Üí
                                                     CPSApp
                                                     (CPSApp (CPSApp (CPSVal (cpsV v‚ÇÅ)) (CPSVal v‚ÇÇ))
                                                      (CPSVal
                                                       (CPSFun
                                                        (Œª v ‚Üí
                                                           CPSVal (CPSFun (Œª t'' ‚Üí k (CPSVar v) (CPSVal (CPSVar t''))))))))) t x
correctEta k t (RFrame (Plus‚ÇÅ e‚ÇÉ) x) = correctEta (Œª v‚ÇÅ ‚Üí  cpsTerm e‚ÇÉ
                                                                          (Œª v‚ÇÇ t‚ÇÇ ‚Üí
                                                                             CPSLet (CPSPlus (CPSVal v‚ÇÅ) (CPSVal v‚ÇÇ)) (Œª v ‚Üí k (CPSVar v) t‚ÇÇ))) t x
correctEta k t (RFrame (Plus‚ÇÇ v‚ÇÅ) x) = correctEta (Œª v‚ÇÇ t‚ÇÇ ‚Üí
                                                      CPSLet (CPSPlus (CPSVal (cpsV v‚ÇÅ)) (CPSVal v‚ÇÇ))
                                                      (Œª v ‚Üí k (CPSVar v) t‚ÇÇ)) t x
correctEta k t (RFrame {e‚ÇÅ = e‚ÇÅ} {e‚ÇÇ = e‚ÇÇ} (Pro x‚ÇÅ) x) = begin
  (CPSLet (cpsTerm e‚ÇÅ (CPSIdk x‚ÇÅ) (CPSVal CPSId))
       (Œª v ‚Üí k (CPSVar v) t))
  ‚ü∂‚ü® rLet‚ÇÅ (correctEta (CPSIdk x‚ÇÅ) (CPSVal CPSId) x) ‚ü©
  (CPSLet (cpsTerm e‚ÇÇ (CPSIdk x‚ÇÅ) (CPSVal CPSId))
       (Œª v ‚Üí k (CPSVar v) t))
  ‚àé
  
correctEta k t (RPrompt {v‚ÇÅ = v‚ÇÅ}) = begin
  (CPSLet (CPSIdk refl (cpsV v‚ÇÅ) (CPSVal CPSId))
       (Œª v ‚Üí k (CPSVar v) t))
  ‚ü∂‚ü® rLet‚ÇÅ rIdkid ‚ü©
  CPSLet (CPSVal (cpsV v‚ÇÅ)) (Œª v ‚Üí k (CPSVar v) t)
  ‚ü∂‚ü® rLetApp ‚ü©
  CPSApp (CPSVal (CPSFun (Œª v ‚Üí k (CPSVar v) t))) (CPSVal (cpsV v‚ÇÅ))
  ‚ü∂‚ü® rBeta {!!} ‚ü©
  (k (cpsV v‚ÇÅ) t)
  ‚àé
correctEta k t (RControl p‚ÇÅ p‚ÇÇ x‚ÇÅ x‚ÇÇ x‚ÇÉ x e) = {!!}



