module rplus where

open import DSt

open import Data.Nat
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.Empty
open import Data.Product
open import Function
open import Relation.Nullary
open import Data.Unit using (‚ä§; tt)
open import Relation.Binary.PropositionalEquality



exp0 : {var : typ ‚Üí Set} {Œ± : typ} {ŒºŒ± : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±

exp0 = Prompt refl (Val (Num 12))

term1 : {var : typ ‚Üí Set}{Œ± : typ} {ŒºŒ± : trail} ‚Üí
        term[ var ] Nat ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±
term1 = Val (Num 1)

term8 : {var : typ ‚Üí Set}{Œ± : typ} {ŒºŒ± : trail} ‚Üí
        term[ var ] Nat ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±
term8 = Val (Num 8)

termx : {var : typ ‚Üí Set}{œÑ Œ± : typ}{ŒºŒ± : trail} ‚Üí
        term[ var ] (œÑ ‚áí œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±) ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±

termx = Val (Fun Œª x ‚Üí Val (Var x))

-- termyz : {var : typ ‚Üí Set} ‚Üí {!!}
-- termyz = Val (Fun (Œª y ‚Üí Val (Fun (Œª z ‚Üí Val (Var z)))))

termy : {var : typ ‚Üí Set}{œÑ Œ± : typ}{ŒºŒ± : trail} ‚Üí
        term[ var ] (œÑ ‚áí œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±) ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±

termy = Val (Fun Œª y ‚Üí Val (Var y))

test4 : {var : typ ‚Üí Set}{ŒºŒ± : trail}{œÑ‚ÇÇ : typ} ‚Üí
        Reduce* {var}{œÑ‚ÇÇ = œÑ‚ÇÇ}{ŒºŒ± = ŒºŒ±} (App termx term1) term1


test4 = R*Trans (App (Val (Fun (Œª z ‚Üí Val (Var z)))) (Val (Num 1)))
        (Val (Num 1)) (Val (Num 1)) (RBeta (sVal sVar=))
        (R*Id (Val (Num 1)))


exp3 : {var : typ ‚Üí Set} {Œ± : typ} {ŒºŒ± : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±
       
exp3 = Plus (Val (Num 1)) (Val (Num 2))

test1 : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ}{ŒºŒ≤ : trail} ‚Üí
       Reduce {var}{œÑ‚ÇÇ = œÑ‚ÇÇ}{ŒºŒ≤ = ŒºŒ≤} exp3 (Val (Num 3))

test1 = RPlus

valuex : {var : typ ‚Üí Set}{œÑ Œ± : typ}{ŒºŒ± : trail} ‚Üí
        value[ var ] (œÑ ‚áí œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±) 
valuex = (Fun Œª x ‚Üí Val (Var x))

test7 : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ}{ŒºŒ± : trail} ‚Üí
         Reduce* {var}{œÑ‚ÇÇ = œÑ‚ÇÇ} {ŒºŒ± = ŒºŒ±} (App (Val (valuex)) (Plus (Val (Num 1)) (Val (Num 2)))) (Val (Num 3))

test7 = R*Trans (App (Val valuex) (Plus (Val (Num 1)) (Val (Num 2)))) (frame-plug (App‚ÇÇ valuex) (Val (Num 3)))
       (Val (Num 3))
       (RFrame (App‚ÇÇ valuex) RPlus)
       (R*Trans (frame-plug (App‚ÇÇ valuex) (Val (Num 3))) (Val (Num 3)) (Val (Num 3))
       (RBeta (sVal sVar=)) (R*Id (Val (Num 3))))


exp4 : {var : typ ‚Üí Set} {Œ≤ : typ} {ŒºŒ≤ : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ≤ ‚ü© Œ≤ ‚ü® ŒºŒ≤ ‚ü© Œ≤

exp4 = Prompt (refl , refl , refl)
                      (Control {Œº‚ÇÄ = Nat ‚áí Nat , ‚àô}
                               {Œº‚ÇÇ = ‚àô}
                               refl refl refl
                               (Œª k ‚Üí (Val (Num 1))))
                               
test2‚Ä≤ : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ} ‚Üí
         Reduce* {var} {œÑ‚ÇÇ = Nat}{ŒºŒ± = Nat ‚áí Nat , ‚àô} exp4 (Val (Num 1))

test2‚Ä≤ = R*Trans exp4
         (Prompt refl
           (App (Val (Fun (Œª k ‚Üí Val (Num 1))))
            (Val (Fun (Œª x ‚Üí pcontext-plug Hole (Val (Var x))))))) (Val (Num 1))
         (RControl {Œ≤' = Tbool}{œÑ‚ÇÉ = Tbool}{œÑ‚ÇÑ = Tbool}{œÑ‚ÇÖ = Tbool}
                   {ŒºŒ≤' = ‚àô}{Œº‚ÇÑ = ‚àô}{Œº‚ÇÖ = ‚àô}
         Hole Hole refl refl refl Hole (Œª k ‚Üí Val (Num 1)))
         (R*Trans (Prompt refl
                    (App (Val (Fun (Œª k ‚Üí Val (Num 1))))
                     (Val (Fun (Œª x ‚Üí pcontext-plug Hole (Val (Var x)))))))
                     (frame-plug (Pro refl) (Val (Num 1))) (Val (Num 1))
                     (RFrame (Pro refl) (RBeta (sVal sNum)))
                     (R*Trans (frame-plug (Pro refl) (Val (Num 1))) (Val (Num 1)) (Val (Num 1))
                     RPrompt (R*Id (Val (Num 1)))))





exp4‚Ä≤ : {var : typ ‚Üí Set} {Œ≤ : typ} {ŒºŒ≤ : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ≤ ‚ü© Œ≤ ‚ü® ŒºŒ≤ ‚ü© Œ≤

exp4‚Ä≤ = Plus (Val (Num 2)) (Prompt refl (Plus (Val (Num 3)) (Val (Num 3))))

                              
exp5 : {var : typ ‚Üí Set} {Œ± œÑ : typ} {ŒºŒ± : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ± ‚ü© Œ±

exp5 = Prompt refl (Plus (Val (Num 1)) (Val (Num 2)))


-- equational reasoning
infix  3 _‚àé
infixr 2 _‚ü∂‚ü®_‚ü©_ _‚ü∂*‚ü®_‚ü©_ _‚â°‚ü®_‚ü©_
infix  1 begin_

begin_ : {var : typ ‚Üí Set} ‚Üí {œÑ Œ± Œ≤ : typ}{ŒºŒ± ŒºŒ≤ : trail} ‚Üí
         {e‚ÇÅ e‚ÇÇ : term[ var ] œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤ } ‚Üí Reduce* e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÅ e‚ÇÇ
begin_ red = red

_‚ü∂‚ü®_‚ü©_ : {var : typ ‚Üí Set} ‚Üí {œÑ Œ± Œ≤ : typ}{ŒºŒ± ŒºŒ≤ : trail} ‚Üí
           (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term[ var ] œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤) ‚Üí Reduce e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
           Reduce* e‚ÇÅ e‚ÇÉ
_‚ü∂‚ü®_‚ü©_ e‚ÇÅ {e‚ÇÇ} {e‚ÇÉ} e‚ÇÅ-red-e‚ÇÇ e‚ÇÇ-red*-e‚ÇÉ =
  R*Trans e‚ÇÅ e‚ÇÇ e‚ÇÉ e‚ÇÅ-red-e‚ÇÇ e‚ÇÇ-red*-e‚ÇÉ

_‚ü∂*‚ü®_‚ü©_ : {var : typ ‚Üí Set} ‚Üí {œÑ Œ± Œ≤ : typ}{ŒºŒ± ŒºŒ≤ : trail} ‚Üí
            (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term[ var ] œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤) ‚Üí Reduce* e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
            Reduce* e‚ÇÅ e‚ÇÉ
_‚ü∂*‚ü®_‚ü©_ e‚ÇÅ {.e‚ÇÅ} {e‚ÇÉ} (R*Id .e‚ÇÅ) e‚ÇÅ-red*-e‚ÇÉ = e‚ÇÅ-red*-e‚ÇÉ
_‚ü∂*‚ü®_‚ü©_ e‚ÇÅ {.e‚ÇÇ} {e‚ÇÉ} (R*Trans .e‚ÇÅ e‚ÇÅ‚Ä≤ e‚ÇÇ e‚ÇÅ-red-e‚ÇÅ‚Ä≤ e‚ÇÅ‚Ä≤-red*-e‚ÇÇ) e‚ÇÇ-red*-e‚ÇÉ =
  R*Trans e‚ÇÅ e‚ÇÅ‚Ä≤ e‚ÇÉ e‚ÇÅ-red-e‚ÇÅ‚Ä≤
          (e‚ÇÅ‚Ä≤ ‚ü∂*‚ü® e‚ÇÅ‚Ä≤-red*-e‚ÇÇ ‚ü© e‚ÇÇ-red*-e‚ÇÉ)

_‚â°‚ü®_‚ü©_ : {var : typ ‚Üí Set} ‚Üí {œÑ Œ± Œ≤ : typ}{ŒºŒ± ŒºŒ≤ : trail} ‚Üí
           (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term[ var ] œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤) ‚Üí e‚ÇÅ ‚â° e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
           Reduce* e‚ÇÅ e‚ÇÉ
_‚â°‚ü®_‚ü©_ e‚ÇÅ {e‚ÇÇ} {e‚ÇÉ} refl e‚ÇÇ-red*-e‚ÇÉ = e‚ÇÇ-red*-e‚ÇÉ

_‚àé : {var : typ ‚Üí Set} ‚Üí {œÑ Œ± Œ≤ : typ}{ŒºŒ± ŒºŒ≤ : trail} ‚Üí
     (e : term[ var ] œÑ ‚ü® ŒºŒ± ‚ü© Œ± ‚ü® ŒºŒ≤ ‚ü© Œ≤) ‚Üí Reduce* e e
_‚àé e = R*Id e


test8 : {var : typ ‚Üí Set}{ŒºŒ± : trail}{œÑ‚ÇÇ : typ} ‚Üí
  Reduce* {var}{œÑ‚ÇÇ = Nat}{ŒºŒ± = ŒºŒ±} (App termx (App termy term1)) term1

test8 = begin
     App termx (App termy term1)
     ‚ü∂‚ü® RFrame (App‚ÇÇ (Fun (Œª x ‚Üí Val (Var x)))) (RBeta (sVal sVar=)) ‚ü©
     frame-plug (App‚ÇÇ (Fun (Œª x ‚Üí Val (Var x)))) (Val (Num 1))
     ‚â°‚ü® refl ‚ü©
     App (Val (Fun (Œª x ‚Üí Val (Var x)))) (Val (Num 1))
     ‚ü∂‚ü® RBeta (sVal sVar=) ‚ü©
     term1
     ‚àé



 
test2‚Ä≤e : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ} ‚Üí
         Reduce* {var} {œÑ‚ÇÇ = Nat}{ŒºŒ± = Nat ‚áí Nat , ‚àô} exp4 (Val (Num 1))

test2‚Ä≤e = begin
       exp4
       ‚ü∂‚ü® RControl {Œ≤' = Tbool}{œÑ‚ÇÉ = Tbool}{œÑ‚ÇÑ = Tbool}{œÑ‚ÇÖ = Tbool}
                    {ŒºŒ≤' = ‚àô}{Œº‚ÇÑ = ‚àô}{Œº‚ÇÖ = ‚àô}
                     Hole Hole refl refl refl Hole (Œª k ‚Üí (Val (Num 1))) ‚ü©
       Prompt refl
         (App (Val (Fun (Œª k ‚Üí Val (Num 1))))
          (Val (Fun (Œª x ‚Üí pcontext-plug Hole (Val (Var x))))))
       ‚ü∂‚ü® RFrame (Pro refl) (RBeta (sVal sNum)) ‚ü©
       frame-plug (Pro refl) (Val (Num 1))
       ‚ü∂‚ü® RPrompt ‚ü©
       Val (Num 1)
       ‚àé
exp4-2 : {var : typ ‚Üí Set} {Œ≤ : typ} {ŒºŒ≤ : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ≤ ‚ü© Œ≤ ‚ü® ŒºŒ≤ ‚ü© Œ≤
exp4-2 = Prompt (refl , refl , refl)
               (Plus (Val (Num 2))
                     (Control {Œº‚ÇÄ = Nat ‚áí Nat , ‚àô}{Œº‚ÇÇ = ‚àô}
                              refl refl refl
                              (Œª k ‚Üí (Val (Num 1)))))

test4-2 : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ}{ŒºŒ± : trail} ‚Üí
        Reduce* {var}{œÑ‚ÇÇ = Nat}{ŒºŒ± = Nat ‚áí Nat , ‚àô} (exp4-2) (Val (Num 1))

test4-2 = begin
       exp4-2
       ‚ü∂‚ü® RControl {Œ≤' = Tbool}{œÑ‚ÇÉ = Tbool}{œÑ‚ÇÑ = Tbool}{œÑ‚ÇÖ = Tbool}
                    {ŒºŒ≤' = ‚àô}{Œº‚ÇÑ = ‚àô}{Œº‚ÇÖ = ‚àô}
                    (Frame (Plus‚ÇÇ (Num 2)) Hole) (Frame (Plus‚ÇÇ (Num 2)) Hole)
            refl refl refl (Frame (Plus‚ÇÇ (Num 2)) Hole) (Œª k ‚Üí (Val (Num 1))) ‚ü©
       Prompt refl
         (App (Val (Fun (Œª k ‚Üí Val (Num 1))))
          (Val
           (Fun
            (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x))))))
       ‚ü∂‚ü® RFrame (Pro refl) (RBeta (sVal sNum)) ‚ü©
       frame-plug (Pro refl) (Val (Num 1))
       ‚ü∂‚ü® RPrompt ‚ü©
       Val (Num 1)
       ‚àé

exp4-3 : {var : typ ‚Üí Set} {Œ≤ : typ} {ŒºŒ≤ : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ≤ ‚ü© Œ≤ ‚ü® ŒºŒ≤ ‚ü© Œ≤
exp4-3 =
       Prompt (refl , refl , refl)
               (Plus (Val (Num 2))
                     (Control {Œº‚ÇÄ = Nat ‚áí Nat , ‚àô}{Œº‚ÇÇ = ‚àô}
                              refl refl refl
                              (Œª k ‚Üí App (Val (Var k))
                                         (Val (Num 3)))))

test4-3 : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ}{ŒºŒ± : trail} ‚Üí
        Reduce* {var}{œÑ‚ÇÇ = Nat}{ŒºŒ± = Nat ‚áí Nat , ‚àô} (exp4-3) (Val (Num 5))

test4-3 = begin
      exp4-3
      ‚ü∂‚ü® RControl{Œ≤' = Tbool}{œÑ‚ÇÉ = Tbool}{œÑ‚ÇÑ = Tbool}{œÑ‚ÇÖ = Tbool}
                    {ŒºŒ≤' = ‚àô}{Œº‚ÇÑ = ‚àô}{Œº‚ÇÖ = ‚àô}
      (Frame (Plus‚ÇÇ (Num 2)) Hole) (Frame (Plus‚ÇÇ (Num 2)) Hole)
      refl refl refl (Frame (Plus‚ÇÇ (Num 2)) Hole) (Œª k ‚Üí App (Val (Var k))
                                         (Val (Num 3))) ‚ü©
      Prompt refl
        (App (Val (Fun (Œª k ‚Üí App (Val (Var k)) (Val (Num 3)))))
         (Val
          (Fun
           (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x))))))
      ‚ü∂‚ü® RFrame (Pro refl) (RBeta (sApp (sVal sVar=) (sVal sNum))) ‚ü©
      frame-plug (Pro refl)
        (App (Val (Fun (Œª y ‚Üí Plus (Val (Num 2)) (Val (Var y)))))
         (Val (Num 3)))
      ‚ü∂‚ü® RFrame (Pro refl) (RBeta (sPlu (sVal sNum) (sVal sVar=))) ‚ü©
      frame-plug (Pro refl) (Plus (Val (Num 2)) (Val (Num 3)))
      ‚ü∂‚ü® RFrame (Pro refl) RPlus ‚ü©
      frame-plug (Pro refl) (Val (Num (2 + 3)))
      ‚ü∂‚ü® RPrompt ‚ü©
      Val (Num 5)
      ‚àé
      
exp4-4 : {var : typ ‚Üí Set} {Œ≤ : typ} {ŒºŒ≤ : trail} ‚Üí
       term[ var ] Nat ‚ü® ŒºŒ≤ ‚ü© Œ≤ ‚ü® ŒºŒ≤ ‚ü© Œ≤
exp4-4 =
     Plus (Val (Num 1))
       (Prompt (refl , refl , refl)
               (Plus (Val (Num 2))
                     (Control {Œº‚ÇÄ = Nat ‚áí Nat , ‚àô}{Œº‚ÇÇ = ‚àô}
                              refl refl refl
                              (Œª k ‚Üí App (Val (Var k))
                                         (App (Val (Var k)) (Val (Num 3)))))))


test4-4 : {var : typ ‚Üí Set}{œÑ‚ÇÇ : typ}{ŒºŒ± : trail} ‚Üí
        Reduce* {var}{œÑ‚ÇÇ = Nat}{ŒºŒ± = Nat ‚áí Nat , ‚àô} (exp4-4) (Val (Num 8))


test4-4 = begin
      exp4-4
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1))
         (RControl {Œ≤' = Tbool}{œÑ‚ÇÉ = Tbool}{œÑ‚ÇÑ = Tbool}{œÑ‚ÇÖ = Tbool}
                   {ŒºŒ≤' = ‚àô}{Œº‚ÇÑ = ‚àô}{Œº‚ÇÖ = ‚àô}
         (Frame (Plus‚ÇÇ (Num 2)) Hole) (Frame (Plus‚ÇÇ (Num 2)) Hole)
          refl refl refl (Frame (Plus‚ÇÇ (Num 2)) Hole) (Œª k ‚Üí App (Val (Var k))
                                            (App (Val (Var k)) (Val (Num 3))))) ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1))
      (Prompt refl
        (App (Val
          (Fun (Œª k ‚Üí App (Val (Var k)) (App (Val (Var k)) (Val (Num 3))))))
         (Val
         (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x)))))))
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1)) (RFrame (Pro refl)
         (RBeta (sApp (sVal sVar=) (sApp (sVal sVar=) (sVal sNum))))) ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1))
        (frame-plug (Pro refl)
         (App (Val
           (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x)))))
          (App (Val
            (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x)))))
           (Val (Num 3)))))
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1)) (RFrame (Pro refl)
          (RFrame (App‚ÇÇ (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x)))))
          (RBeta (sPlu (sVal sNum) (sVal sVar=))))) ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1)) (frame-plug (Pro refl)
      (frame-plug
        (App‚ÇÇ
         (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x)))))
        (Plus (Val (Num 2)) (Val (Num 3)))))
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1)) (RFrame (Pro refl)
          (RFrame
          (App‚ÇÇ (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x))))) RPlus)) ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1))
        (frame-plug (Pro refl)
         (frame-plug
          (App‚ÇÇ
           (Fun (Œª x ‚Üí pcontext-plug (Frame (Plus‚ÇÇ (Num 2)) Hole) (Val (Var x)))))
           (Val (Num (2 + 3)))))
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1)) (RFrame (Pro refl) (RBeta (sPlu (sVal sNum) (sVal sVar=)))) ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1))
        (frame-plug (Pro refl) (Plus (Val (Num 2)) (Val (Num (2 + 3)))))
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1)) (RFrame (Pro refl) RPlus) ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1))
        (frame-plug (Pro refl) (Val (Num (2 + (2 + 3)))))
      ‚ü∂‚ü® RFrame (Plus‚ÇÇ (Num 1)) RPrompt ‚ü©
       frame-plug (Plus‚ÇÇ (Num 1)) (Val (Num (2 + (2 + 3))))
      ‚ü∂‚ü® RPlus ‚ü©
       Val (Num 8)
      ‚àé
